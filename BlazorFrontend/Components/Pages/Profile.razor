@page "/profile"
@using BlazorFrontend.DTO
@using BlazorFrontend.DTO.Comments
@using BlazorFrontend.DTO.Events
@using BlazorFrontend.DTO.Interests
@using BlazorFrontend.DTO.Likes
@using BlazorFrontend.DTO.Posts
@using BlazorFrontend.DTO.Profiles
@using BlazorFrontend.Helpers
@using BlazorFrontend.Services.Interfaces

@inject IProfileService ProfileService
@inject IInterestService InterestService
@inject IPostService PostService
@inject ICommentService CommentService
@inject ILikeService LikeService
@inject IEventService EventService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3>Мій профіль</h3>

@if (profile == null || editModel == null)
{
    <p>Завантаження...</p>
}
else
{
    <div class="card p-3 shadow mb-4">
        <img src="@GetParsedImage(profile.AvatarUrl)" width="150" />
        <h4>@profile.Username</h4>
        <p><strong>@profile.City, @profile.Age</strong></p>
        <p>@profile.Description</p>
        <p><strong>Інтереси:</strong> @string.Join(", ", profile.Interests)</p>
    </div>

    <EditForm Model="editModel" OnValidSubmit="UpdateProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2"><label>Місто:</label> <InputText @bind-Value="editModel.City" class="form-control" /></div>
        <div class="mb-2"><label>Вік:</label> <InputNumber @bind-Value="editModel.Age" class="form-control" /></div>
        <div class="mb-2"><label>Опис:</label> <InputTextArea @bind-Value="editModel.Description" class="form-control" /></div>
        <div class="mb-2">
            <label>Аватар:</label>
            <InputFile OnChange="HandleImageUpload" />
            @if (!string.IsNullOrEmpty(editModel.AvatarUrl))
            {
                <div class="mt-2">
                    <img src="@GetParsedImage(editModel.AvatarUrl)" width="150" />
                </div>
            }
        </div>
        <div class="mb-2">
            <label>Стать:</label>
            <InputSelect @bind-Value="editModel.Gender" class="form-control">
                <option value="Male">Чоловіча</option>
                <option value="Female">Жіноча</option>
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Інтереси:</label>
            @foreach (var interest in allInterests)
            {
                <div>
                    <input type="checkbox"
                           checked="@IsInterestSelected(interest.InterestId)"
                           @onchange="e => ToggleInterest(interest.InterestId, (bool)e.Value!)" />
                    @interest.Name
                </div>
            }


        </div>
        <button class="btn btn-primary mt-2">Зберегти зміни</button>
    </EditForm>

    <hr />

    <h5>Мої події</h5>
    <button class="btn btn-outline-success mb-3" @onclick="NavigateToCreateEvent">
        ➕ Створити подію
    </button>
    @if (userEvents.Count == 0)
    {
        <p>Подій не знайдено.</p>
    }
    else
    {
        @foreach (var ev in userEvents)
        {
            <div class="card mb-2 p-2">
                <strong>@ev.Title</strong> – @ev.Location (@ev.StartTime.ToShortDateString())
                <strong>Кількість учасників: @ev.ParticipantCount</strong>
                <button class="btn btn-sm btn-danger float-end" @onclick="() => DeleteEvent(ev.EventId)">Видалити</button>
            </div>
        }
    }


    <h5 class="mt-4">Мої пости</h5>
    <button class="btn btn-success mb-3" @onclick="ShowCreatePostModal">Створити пост</button>
    @if (posts.Count == 0)
    {
        <p>Постів немає.</p>
    }
    else
    {
        @foreach (var post in posts)
        {
            <div class="card p-3 mb-3 shadow">
                <p><strong>@post.AuthorUsername</strong></p>
                <p>@post.Content</p>
                @if (!string.IsNullOrWhiteSpace(post.ImageUrl))
                {
                    <img src="@GetParsedImage(post.ImageUrl)" class="img-fluid" width="350" />
                }

                <p>
                    👍 @post.LikeCount | 💬 @post.CommentCount
                    <button class="btn btn-sm btn-outline-primary ms-2" @onclick="() => ToggleLike(post.PostId)">Лайк</button>
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ToggleComments(post.PostId)">
                        @(visibleComments.Contains(post.PostId) ? "Сховати коментарі" : "Показати коментарі")
                    </button>
                    <button class="btn btn-sm btn-danger ms-2" @onclick="() => DeletePost(post.PostId)">Видалити пост</button>
                </p>

                @if (visibleComments.Contains(post.PostId))
                {
                    <div class="mt-2">
                        @if (comments.ContainsKey(post.PostId))
                        {
                            @foreach (var comment in comments[post.PostId])
                            {
                                <div class="border p-2 mb-1">
                                    <strong>@comment.AuthorUsername:</strong> @comment.Content
                                </div>
                            }
                        }
                        else
                        {
                            <p><em>Завантаження коментарів...</em></p>
                        }
                    </div>
                }
                @{
                    var commentModel = newComments[post.PostId];
                }

                <EditForm Model="commentModel" OnValidSubmit="() => SubmitComment(post.PostId)">
                    <InputText @bind-Value="commentModel.Content" class="form-control" />
                    <button class="btn btn-sm btn-success mt-1">Надіслати</button>
                </EditForm>
                
            </div>
        }
    }
}

@if (showPostModal)
{
    <div class="modal d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">Новий пост</h5>
                    <button type="button" class="btn-close" @onclick="ClosePostModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newPost" OnValidSubmit="CreatePost">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-2">
                            <label>Зміст:</label>
                            <InputTextArea @bind-Value="newPost.Content" class="form-control" />
                        </div>

                        <div class="mb-2">
                            <label>Зображення:</label>
                            <InputFile OnChange="HandlePostImageUpload" />
                            @if (!string.IsNullOrEmpty(newPost.ImageUrl))
                            {
                                <div class="mt-2">
                                    <img src="@GetParsedImage(newPost.ImageUrl)" class="img-fluid" />
                                </div>
                            }
                        </div>


                        <button class="btn btn-primary" type="submit">Опублікувати</button>
                        <button class="btn btn-secondary ms-2" @onclick="ClosePostModal" type="button">Скасувати</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private ProfileDto? profile;
    private UpdateProfileDto? editModel;
    private List<InterestDto> allInterests = new();
    private List<EventDto> userEvents = new();
    private List<PostDto> posts = new();
    private Dictionary<int, CreatePostCommentDto> newComments = new();
    private Dictionary<int, List<PostCommentDto>> comments = new();
    private HashSet<int> visibleComments = new();
    private string currentUserId = UserContext.UserId;

    private bool showPostModal = false;
    private CreatePostDto newPost = new();

    private void ShowCreatePostModal()
    {
        newPost = new CreatePostDto
            {
                UserId = currentUserId,
                Content = "",
                ImageUrl = ""
            };
        showPostModal = true;
    }

    private void ClosePostModal()
    {
        showPostModal = false;
    }

    private async Task CreatePost()
    {
        await PostService.CreateAsync(newPost);
        showPostModal = false;

        await RefreshPosts();

        foreach (var post in posts)
        {
            if (!newComments.ContainsKey(post.PostId))
            {
                newComments[post.PostId] = new CreatePostCommentDto
                    {
                        PostId = post.PostId,
                        UserId = currentUserId,
                        Content = ""
                    };
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {
        profile = await ProfileService.GetByUserIdAsync(currentUserId);
        allInterests = await InterestService.GetAllAsync();

        if (profile != null)
        {
            editModel = new UpdateProfileDto
                {
                    City = profile.City,
                    Age = profile.Age,
                    Description = profile.Description,
                    AvatarUrl = profile.AvatarUrl,
                    Gender = profile.Gender,
                    InterestIds = new()
                };

            foreach (var interestName in profile.Interests)
            {
                var interest = allInterests.FirstOrDefault(i => i.Name == interestName);
                if (interest != null)
                    editModel.InterestIds.Add(interest.InterestId);
            }

            posts = (await PostService.GetAllAsync())
                .Where(p => p.AuthorUsername == profile.Username).ToList();

            userEvents = (await EventService.GetAllAsync())
                .Where(e => e.CreatorUsername == profile.Username).ToList();

            foreach (var post in posts)
            {
                newComments[post.PostId] = new CreatePostCommentDto
                    {
                        PostId = post.PostId,
                        UserId = currentUserId,
                        Content = ""
                    };
            }
        }
    }

    /*private void OnInterestChanged(ChangeEventArgs e, int interestId)
    {
        var isChecked = e.Value?.ToString() == "true" || e.Value?.ToString() == "on";
        ToggleInterest(interestId, isChecked);
    }

    private void ToggleInterest(int id, bool selected)
    {
        if (selected && !editModel!.InterestIds.Contains(id))
            editModel.InterestIds.Add(id);
        else if (!selected)
            editModel!.InterestIds.Remove(id);
    }*/

    private async Task UpdateProfile()
    {
        await ProfileService.UpdateAsync(editModel!, currentUserId);
        profile = await ProfileService.GetByUserIdAsync(currentUserId);
    }

    private async Task ToggleLike(int postId)
    {
        var dto = new PostLikeDto { PostId = postId, UserId = currentUserId };
        bool liked = await LikeService.IsLikedAsync(postId, currentUserId);

        if (liked)
            await LikeService.UnlikeAsync(dto);
        else
            await LikeService.LikeAsync(dto);

        await RefreshPosts();
    }

    private async Task ToggleComments(int postId)
    {
        if (visibleComments.Contains(postId))
            visibleComments.Remove(postId);
        else
        {
            visibleComments.Add(postId);
            if (!comments.ContainsKey(postId))
                comments[postId] = await CommentService.GetByPostIdAsync(postId);
        }
    }

    private async Task SubmitComment(int postId)
    {
        var dto = newComments[postId];
        if (string.IsNullOrWhiteSpace(dto.Content)) return;

        await CommentService.AddAsync(dto);
        dto.Content = "";

        comments[postId] = await CommentService.GetByPostIdAsync(postId);
        await RefreshPosts();
    }

    private async Task RefreshPosts()
    {
        posts = (await PostService.GetAllAsync())
            .Where(p => p.AuthorUsername == profile?.Username).ToList();
    }

    private async Task DeleteEvent(int eventId)
    {
        await EventService.DeleteAsync(eventId);
        userEvents = (await EventService.GetAllAsync())
            .Where(e => e.CreatorUsername == profile?.Username).ToList();
    }


    private async Task DeletePost(int postId)
    {
        await PostService.DeleteAsync(postId);
        await RefreshPosts(); 
    }

    private bool IsInterestSelected(int interestId)
    {
        return editModel?.InterestIds.Contains(interestId) ?? false;
    }

    private void ToggleInterest(int interestId, bool selected)
    {
        if (editModel == null)
            return;

        if (selected && !editModel.InterestIds.Contains(interestId))
            editModel.InterestIds.Add(interestId);
        else if (!selected && editModel.InterestIds.Contains(interestId))
            editModel.InterestIds.Remove(interestId);
    }

    private string GetParsedImage(string? base64)
    {
        if (string.IsNullOrEmpty(base64))
            return ""; // або якась заглушка

        return $"data:image/jpeg;base64,{base64}";
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // до 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            string base64 = Convert.ToBase64String(bytes);

            editModel!.AvatarUrl = base64;
        }
    }

    private async Task HandlePostImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // max 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            string base64 = Convert.ToBase64String(bytes);

            newPost.ImageUrl = base64;
        }
    }

    private void NavigateToCreateEvent()
    {
        Navigation.NavigateTo("/create-event");
    }

}
