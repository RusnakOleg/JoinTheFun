@page "/profile"
@using BlazorFrontend.DTO
@using BlazorFrontend.DTO.Comments
@using BlazorFrontend.DTO.Events
@using BlazorFrontend.DTO.Interests
@using BlazorFrontend.DTO.Likes
@using BlazorFrontend.DTO.Posts
@using BlazorFrontend.DTO.Profiles
@using BlazorFrontend.Helpers
@using BlazorFrontend.Services.Interfaces

@inject IProfileService ProfileService
@inject IInterestService InterestService
@inject IPostService PostService
@inject ICommentService CommentService
@inject ILikeService LikeService
@inject IEventService EventService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<div class="container mt-4">
    <h3 class="fw-bold text-center mb-4">Мій профіль</h3>

    @if (profile == null || editModel == null)
    {
        <div class="text-center text-muted"><em>Завантаження...</em></div>
    }
    else
    {
        <div class="row gx-4 gy-4">
            <!-- LEFT column: Профіль + редагування -->
            <div class="col-12 col-lg-4">
                <div style="max-height: 130vh; overflow-y: auto; padding-right: 4px;">
                    <!-- Профільна інформація -->
                    <div class="card p-4 shadow-sm mb-4">
                        <div class="d-flex align-items-center mb-3">
                            <img src="@GetParsedImage(profile.AvatarUrl)" class="rounded-circle me-3" style="width: 80px; height: 80px; object-fit: cover;" />
                            <div>
                                <h5 class="mb-1">@profile.Username</h5>
                                <p class="mb-0 text-muted">@profile.City, @profile.Age</p>
                            </div>
                        </div>
                        <p>@profile.Description</p>
                        <p><strong>Інтереси:</strong> @string.Join(", ", profile.Interests)</p>
                    </div>

                    <!-- Форма редагування -->
                    <div class="card p-4 shadow-sm">
                        <h6 class="fw-semibold mb-3">Редагування</h6>

                        <EditForm Model="editModel" OnValidSubmit="UpdateProfile">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="editModel.City" id="city" class="form-control" placeholder="Місто" />
                                <label for="city">Місто</label>
                            </div>

                            <div class="form-floating mb-3">
                                <InputNumber @bind-Value="editModel.Age" id="age" class="form-control" placeholder="Вік" />
                                <label for="age">Вік</label>
                            </div>

                            <div class="form-floating mb-3">
                                <InputTextArea @bind-Value="editModel.Description" id="desc" class="form-control" placeholder="Опис" style="height: 100px;" />
                                <label for="desc">Опис</label>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Аватар:</label>
                                <InputFile OnChange="HandleImageUpload" />
                                @if (!string.IsNullOrEmpty(editModel.AvatarUrl))
                                {
                                    <div class="mt-2">
                                        <img src="@GetParsedImage(editModel.AvatarUrl)" class="img-thumbnail" style="max-width: 150px;" />
                                    </div>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Стать:</label>
                                <InputSelect @bind-Value="editModel.Gender" class="form-select">
                                    <option value="Male">Чоловіча</option>
                                    <option value="Female">Жіноча</option>
                                </InputSelect>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Інтереси:</label>
                                <div class="row">
                                    @foreach (var interest in allInterests)
                                    {
                                        <div class="col-6 mb-1">
                                            <input type="checkbox"
                                                   checked="@IsInterestSelected(interest.InterestId)"
                                                   @onchange="e => ToggleInterest(interest.InterestId, (bool)e.Value!)" />
                                            @interest.Name
                                        </div>
                                    }
                                </div>
                            </div>

                            <button class="btn btn-primary w-100">Зберегти</button>
                        </EditForm>
                    </div>
                </div>
            </div>

            <!-- RIGHT column: Події та пости -->
            <div class="col-12 col-lg-8">
                <!-- Події -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="fw-semibold mb-0">Мої події</h5>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => showMyEvents = !showMyEvents">
                            @(showMyEvents ? "⬆ Сховати" : "⬇ Показати")
                        </button>
                        <button class="btn btn-outline-success btn-sm" @onclick="NavigateToCreateEvent">➕ Створити подію</button>
                    </div>
                </div>

                @if (showMyEvents)
                {
                    @if (userEvents.Count == 0)
                    {
                        <p class="text-muted">Подій не знайдено.</p>
                    }
                    else
                    {
                        @foreach (var ev in userEvents)
                        {
                            <div class="card p-3 mb-3 shadow-sm">
                                <strong>@ev.Title</strong> – @ev.Location (@ev.StartTime.ToShortDateString())<br />
                                <small>Кількість учасників: @ev.ParticipantCount</small>
                                <button class="btn btn-sm btn-danger float-end" @onclick="() => DeleteEvent(ev.EventId)">Видалити</button>
                            </div>
                        }
                    }
                }


               

                <!-- Пости -->
                <div class="d-flex justify-content-between align-items-center mt-4 mb-3">
                    <h5 class="fw-semibold mb-0">Мої пости</h5>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => showMyPosts = !showMyPosts">
                            @(showMyPosts ? "⬆ Сховати" : "⬇ Показати")
                        </button>
                        <button class="btn btn-success btn-sm" @onclick="ShowCreatePostModal">Створити пост</button>
                    </div>
                </div>
                @if (showMyPosts)
                {
                @if (posts.Count == 0)
                {
                    <p class="text-muted">Постів немає.</p>
                }
                else
                {
                    @foreach (var post in posts)
                    {
                            <div class="card p-3 mb-4 shadow-sm position-relative">
                                <!-- Кнопка видалення -->
                                <button class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2"
                                        title="Видалити пост"
                                        @onclick="() => DeletePost(post.PostId)">
                                    ×
                                </button>

                                <p class="fw-semibold mb-1">@post.AuthorUsername</p>
                                <p>@post.Content</p>

                                @if (!string.IsNullOrWhiteSpace(post.ImageUrl))
                                {
                                    <div class="text-center mb-3">
                                        <img src="@GetParsedImage(post.ImageUrl)" class="img-fluid rounded" style="max-width: 500px;" />
                                    </div>
                                }

                                <!-- Лайки, коментарі, дії -->
                                <div class="d-flex align-items-center flex-wrap mb-2">
                                    <span class="me-3">👍 @post.LikeCount</span>
                                    <span class="me-3">💬 @post.CommentCount</span>

                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ToggleLike(post.PostId)">Лайк</button>
                                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ToggleComments(post.PostId)">
                                        @(visibleComments.Contains(post.PostId) ? "Сховати коментарі" : "Показати коментарі")
                                    </button>
                                </div>

                                @if (visibleComments.Contains(post.PostId))
                                {
                                    <div class="list-group mb-3">
                                        @if (comments.ContainsKey(post.PostId))
                                        {
                                            @foreach (var comment in comments[post.PostId])
                                            {
                                                <div class="list-group-item">
                                                    <strong>@comment.AuthorUsername:</strong> @comment.Content
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="text-muted"><em>Завантаження коментарів...</em></div>
                                        }
                                    </div>
                                }

                                @{
                                    var commentModel = newComments[post.PostId];
                                }

                                <EditForm Model="commentModel" OnValidSubmit="() => SubmitComment(post.PostId)">
                                    <div class="input-group">
                                        <InputText @bind-Value="commentModel.Content" class="form-control" placeholder="Ваш коментар..." />
                                        <button class="btn btn-success" type="submit">Надіслати</button>
                                    </div>
                                </EditForm>
                            </div>

                    }
                }
                }
            </div>
        </div>
    }

    <!-- Модальне вікно нового поста -->
    @if (showPostModal)
    {
        <div class="modal d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content p-3">
                    <div class="modal-header">
                        <h5 class="modal-title">Новий пост</h5>
                        <button type="button" class="btn-close" @onclick="ClosePostModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newPost" OnValidSubmit="CreatePost">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            <div class="form-floating mb-3">
                                <InputTextArea @bind-Value="newPost.Content" id="postContent" class="form-control" placeholder="Зміст" style="height: 100px;" />
                                <label for="postContent">Зміст</label>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Зображення:</label>
                                <InputFile OnChange="HandlePostImageUpload" />
                                @if (!string.IsNullOrEmpty(newPost.ImageUrl))
                                {
                                    <div class="mt-2">
                                        <img src="@GetParsedImage(newPost.ImageUrl)" class="img-fluid" />
                                    </div>
                                }
                            </div>

                            <div class="d-flex justify-content-end">
                                <button class="btn btn-primary" type="submit">Опублікувати</button>
                                <button class="btn btn-secondary ms-2" type="button" @onclick="ClosePostModal">Скасувати</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private ProfileDto? profile;
    private UpdateProfileDto? editModel;
    private List<InterestDto> allInterests = new();
    private List<EventDto> userEvents = new();
    private List<PostDto> posts = new();
    private Dictionary<int, CreatePostCommentDto> newComments = new();
    private Dictionary<int, List<PostCommentDto>> comments = new();
    private HashSet<int> visibleComments = new();
    private string currentUserId = UserContext.UserId;
    private bool showMyEvents = true;
    private bool showMyPosts = true;


    private bool showPostModal = false;
    private CreatePostDto newPost = new();

    private void ShowCreatePostModal()
    {
        newPost = new CreatePostDto
            {
                UserId = currentUserId,
                Content = "",
                ImageUrl = ""
            };
        showPostModal = true;
    }

    private void ClosePostModal()
    {
        showPostModal = false;
    }

    private async Task CreatePost()
    {
        await PostService.CreateAsync(newPost);
        showPostModal = false;

        await RefreshPosts();

        foreach (var post in posts)
        {
            if (!newComments.ContainsKey(post.PostId))
            {
                newComments[post.PostId] = new CreatePostCommentDto
                    {
                        PostId = post.PostId,
                        UserId = currentUserId,
                        Content = ""
                    };
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {
        profile = await ProfileService.GetByUserIdAsync(currentUserId);
        allInterests = await InterestService.GetAllAsync();

        if (profile != null)
        {
            editModel = new UpdateProfileDto
                {
                    City = profile.City,
                    Age = profile.Age,
                    Description = profile.Description,
                    AvatarUrl = profile.AvatarUrl,
                    Gender = profile.Gender,
                    InterestIds = new()
                };

            foreach (var interestName in profile.Interests)
            {
                var interest = allInterests.FirstOrDefault(i => i.Name == interestName);
                if (interest != null)
                    editModel.InterestIds.Add(interest.InterestId);
            }

            posts = (await PostService.GetAllAsync())
                .Where(p => p.AuthorUsername == profile.Username).ToList();

            userEvents = (await EventService.GetAllAsync())
                .Where(e => e.CreatorUsername == profile.Username).ToList();

            foreach (var post in posts)
            {
                newComments[post.PostId] = new CreatePostCommentDto
                    {
                        PostId = post.PostId,
                        UserId = currentUserId,
                        Content = ""
                    };
            }
        }
    }


    private async Task UpdateProfile()
    {
        await ProfileService.UpdateAsync(editModel!, currentUserId);
        profile = await ProfileService.GetByUserIdAsync(currentUserId);
    }

    private async Task ToggleLike(int postId)
    {
        var dto = new PostLikeDto { PostId = postId, UserId = currentUserId };
        bool liked = await LikeService.IsLikedAsync(postId, currentUserId);

        if (liked)
            await LikeService.UnlikeAsync(dto);
        else
            await LikeService.LikeAsync(dto);

        await RefreshPosts();
    }

    private async Task ToggleComments(int postId)
    {
        if (visibleComments.Contains(postId))
            visibleComments.Remove(postId);
        else
        {
            visibleComments.Add(postId);
            if (!comments.ContainsKey(postId))
                comments[postId] = await CommentService.GetByPostIdAsync(postId);
        }
    }

    private async Task SubmitComment(int postId)
    {
        var dto = newComments[postId];
        if (string.IsNullOrWhiteSpace(dto.Content)) return;

        await CommentService.AddAsync(dto);
        dto.Content = "";

        comments[postId] = await CommentService.GetByPostIdAsync(postId);
        await RefreshPosts();
    }

    private async Task RefreshPosts()
    {
        posts = (await PostService.GetAllAsync())
            .Where(p => p.AuthorUsername == profile?.Username).ToList();
    }

    private async Task DeleteEvent(int eventId)
    {
        await EventService.DeleteAsync(eventId);
        userEvents = (await EventService.GetAllAsync())
            .Where(e => e.CreatorUsername == profile?.Username).ToList();
    }


    private async Task DeletePost(int postId)
    {
        await PostService.DeleteAsync(postId);
        await RefreshPosts(); 
    }

    private bool IsInterestSelected(int interestId)
    {
        return editModel?.InterestIds.Contains(interestId) ?? false;
    }

    private void ToggleInterest(int interestId, bool selected)
    {
        if (editModel == null)
            return;

        if (selected && !editModel.InterestIds.Contains(interestId))
            editModel.InterestIds.Add(interestId);
        else if (!selected && editModel.InterestIds.Contains(interestId))
            editModel.InterestIds.Remove(interestId);
    }

    private string GetParsedImage(string? base64)
    {
        if (string.IsNullOrEmpty(base64))
            return ""; // або якась заглушка

        return $"data:image/jpeg;base64,{base64}";
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // до 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            string base64 = Convert.ToBase64String(bytes);

            editModel!.AvatarUrl = base64;
        }
    }

    private async Task HandlePostImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // max 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            string base64 = Convert.ToBase64String(bytes);

            newPost.ImageUrl = base64;
        }
    }

    private void NavigateToCreateEvent()
    {
        Navigation.NavigateTo("/create-event");
    }

}
