@page "/events"
@using BlazorFrontend.DTO.Events
@using BlazorFrontend.DTO.Event_Participants
@using BlazorFrontend.Helpers
@using BlazorFrontend.Services.Interfaces

@inject IEventService EventService
@inject IEventParticipantService ParticipantService
@inject NavigationManager Navigation


@rendermode InteractiveServer

<h3>Список подій</h3>

<button class="btn btn-outline-success mb-3 float-end" @onclick="NavigateToCreateEvent">
    ➕ Створити подію
</button>

<div class="mb-2">
    <input @bind="searchCity" placeholder="Пошук за містом" class="form-control" />
</div>

<div>
    <button @onclick="Search" class="btn btn-primary">Шукати</button>
    <button class="btn btn-secondary ms-2" @onclick="Reset">Скинути</button>
</div>

@if (events == null)
{
    <p><em>Події не завантажено...</em></p>
}
else if (events.Count == 0)
{
    <p><strong>Нічого не знайдено.</strong></p>
}
else
{
    @foreach (var ev in events)
    {
        <div class="card m-2 p-3 shadow">
            <!--<img src="@ev.ImageUrl" width="100" />-->
            <h5>@ev.Title</h5>
            <p>@ev.Description</p>
            <p><strong>Місце:</strong> @ev.Location</p>
            <p><strong>Час:</strong> @ev.StartTime.ToString("g")</p>
            <p><strong>Учасників:</strong> @ev.ParticipantCount</p>
            <p><strong>Автор події:</strong> @ev.CreatorUsername</p>

            @if (joinedEventIds.Contains(ev.EventId))
            {
                <button class="btn btn-danger" @onclick="() => LeaveEvent(ev.EventId)">Вийти з події</button>
            }
            else
            {
                <button class="btn btn-success" @onclick="() => JoinEvent(ev.EventId)">Долучитися</button>
            }
        </div>
    }
}

@code {
    private string searchCity = "";
    private List<EventDto>? events;
    private HashSet<int> joinedEventIds = new();
    private string userId = UserContext.UserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        events = await EventService.GetAllAsync();
        var joined = await ParticipantService.GetByUserIdAsync(userId);
        joinedEventIds = joined.Select(p => p.EventId).ToHashSet();
    }

    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchCity))
        {
            events = await EventService.GetByLocationAsync(searchCity);
        }
        else
        {
            events = await EventService.GetAllAsync();
        }

        var joined = await ParticipantService.GetByUserIdAsync(userId);
        joinedEventIds = joined.Select(p => p.EventId).ToHashSet();
    }

    private async Task Reset()
    {
        searchCity = "";
        await LoadData();
    }

    private async Task JoinEvent(int eventId)
    {
        var dto = new EventParticipantDto
        {
            EventId = eventId,
            UserId = userId,
            Status = "going" // або "interested", якщо потрібно
        };

        await ParticipantService.AddAsync(dto);
        await LoadData();
    }

    private async Task LeaveEvent(int eventId)
    {
        var dto = new RemoveEventParticipantDto
        {
            EventId = eventId,
            UserId = userId
        };

        await ParticipantService.RemoveAsync(dto);
        await LoadData();
    }

    private void NavigateToCreateEvent()
    {
        Navigation.NavigateTo("/create-event");
    }

}
