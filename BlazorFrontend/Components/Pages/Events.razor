@page "/events"
@using BlazorFrontend.DTO.Events
@using BlazorFrontend.DTO.Event_Participants
@using BlazorFrontend.Helpers
@using BlazorFrontend.Services.Interfaces

@inject IEventService EventService
@inject IEventParticipantService ParticipantService
@inject NavigationManager Navigation


@rendermode InteractiveServer

<h3 class="mb-4 fw-bold text-center">Список подій</h3>

<div class="d-flex justify-content-center">
    <div style="width: 100%; max-width: 800px;">

        <div class="d-flex justify-content-between align-items-start mb-4 flex-wrap gap-2">
            <div class="d-flex" style="max-width: 500px; width: 100%;">
                <input @bind="searchCity" placeholder="Пошук за містом" class="form-control me-2" />
                <button class="btn btn-primary me-2" type="button" @onclick="Search">Шукати</button>
                <button class="btn btn-secondary" type="button" @onclick="Reset">Скинути</button>
            </div>

            <button class="btn btn-outline-success" @onclick="NavigateToCreateEvent">
                ➕ Створити подію
            </button>
        </div>



        @if (events == null)
        {
            <div class="text-muted text-center"><em>Події не завантажено...</em></div>
        }
        else if (events.Count == 0)
        {
            <div class="text-center"><strong>Нічого не знайдено.</strong></div>
        }
        else
        {
            @foreach (var ev in events)
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-body">
                        <h5 class="card-title fw-semibold">@ev.Title</h5>
                        <p class="card-text">@ev.Description</p>

                        <ul class="list-unstyled mb-3">
                            <li><strong>Місце:</strong> @ev.Location</li>
                            <li><strong>Час:</strong> @ev.StartTime.ToString("g")</li>
                            <li><strong>Учасників:</strong> @ev.ParticipantCount</li>
                            <li><strong>Автор:</strong> @ev.CreatorUsername</li>
                        </ul>

                        @if (joinedEventIds.Contains(ev.EventId))
                        {
                            <button class="btn btn-danger" @onclick="() => LeaveEvent(ev.EventId)">Вийти з події</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="() => JoinEvent(ev.EventId)">Долучитися</button>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>


@code {
    private string searchCity = "";
    private List<EventDto>? events;
    private HashSet<int> joinedEventIds = new();
    private string userId = UserContext.UserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        events = await EventService.GetAllAsync();
        var joined = await ParticipantService.GetByUserIdAsync(userId);
        joinedEventIds = joined.Select(p => p.EventId).ToHashSet();
    }

    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchCity))
        {
            events = await EventService.GetByLocationAsync(searchCity);
        }
        else
        {
            events = await EventService.GetAllAsync();
        }

        var joined = await ParticipantService.GetByUserIdAsync(userId);
        joinedEventIds = joined.Select(p => p.EventId).ToHashSet();
    }

    private async Task Reset()
    {
        searchCity = "";
        await LoadData();
    }

    private async Task JoinEvent(int eventId)
    {
        var dto = new EventParticipantDto
        {
            EventId = eventId,
            UserId = userId,
            Status = "going" // або "interested", якщо потрібно
        };

        await ParticipantService.AddAsync(dto);
        await LoadData();
    }

    private async Task LeaveEvent(int eventId)
    {
        var dto = new RemoveEventParticipantDto
        {
            EventId = eventId,
            UserId = userId
        };

        await ParticipantService.RemoveAsync(dto);
        await LoadData();
    }

    private void NavigateToCreateEvent()
    {
        Navigation.NavigateTo("/create-event");
    }

}
