@page "/user-profile/{UserId}"
@using BlazorFrontend.DTO.Comments
@using BlazorFrontend.DTO.Event_Participants
@using BlazorFrontend.DTO.Events
@using BlazorFrontend.DTO.Folowers
@using BlazorFrontend.DTO.Likes
@using BlazorFrontend.DTO.Posts
@using BlazorFrontend.DTO.Profiles
@using BlazorFrontend.Helpers
@using BlazorFrontend.Services.Interfaces
@inject IProfileService ProfileService
@inject IPostService PostService
@inject ICommentService CommentService
@inject ILikeService LikeService
@inject IEventService EventService
@inject IFollowService FollowService
@inject IEventParticipantService ParticipantService


@rendermode InteractiveServer

@if (profile == null)
{
    <div class="text-center text-muted mt-4"><em>Завантаження...</em></div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <!-- Ліва колонка: профіль -->
            <div class="col-md-4">
                <div class="position-sticky" style="top: 6rem;">
                    <div class="card p-4 shadow-sm mb-4">
                        <div class="d-flex align-items-center mb-3">
                            <img src="@GetParsedImage(profile.AvatarUrl)" class="rounded-circle me-3" style="width: 80px; height: 80px; object-fit: cover;" />
                            <div>
                                <h4 class="mb-1">@profile.Username</h4>
                                <p class="mb-0 text-muted">@profile.City, @profile.Age</p>
                            </div>
                        </div>

                        <p>@profile.Description</p>
                        <p><strong>Інтереси:</strong> @string.Join(", ", profile.Interests)</p>

                        @if (UserId != currentUserId)
                        {
                            <button class="btn btn-sm @(isFollowing ? "btn-danger" : "btn-primary")" @onclick="ToggleFollow">
                                @(isFollowing ? "Відписатись" : "Підписатись")
                            </button>
                        }
                    </div>
                </div>
            </div>

            <!-- Права колонка: події та пости -->
            <div class="col-md-8">
                <!-- Події -->
                <!-- Кнопка згортання подій -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="fw-semibold mb-0">Події користувача</h5>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => showEvents = !showEvents)">
                        @(showEvents ? "⬆ Сховати" : "⬇ Показати")
                    </button>
                </div>
                @if (showEvents)
             {
                @if (userEvents.Count == 0)
                {
                    <p class="text-muted">Подій не знайдено.</p>
                }
                else
                {
                    @foreach (var ev in userEvents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-body">
                                <h6 class="card-title">@ev.Title</h6>
                                <p class="card-text">@ev.Location — @ev.StartTime.ToShortDateString()</p>
                                <p class="mb-2">Кількість учасників: @ev.ParticipantCount</p>

                                @if (joinedEventIds.Contains(ev.EventId))
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="() => LeaveEvent(ev.EventId)">Вийти</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-success" @onclick="() => JoinEvent(ev.EventId)">Долучитися</button>
                                }
                            </div>
                        </div>
                    }
                }
            }

                <!-- Кнопка згортання постів -->
                <div class="d-flex justify-content-between align-items-center mt-4 mb-3">
                    <h5 class="fw-semibold mb-0">Пости користувача</h5>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => showPosts = !showPosts)">
                        @(showPosts ? "⬆ Сховати" : "⬇ Показати")
                    </button>
                </div>
                @if (showPosts)
                {
                @if (posts.Count == 0)
                {
                    <p class="text-muted">Постів немає.</p>
                }
                else
                {
                    @foreach (var post in posts)
                    {
                        <div class="card p-3 mb-4 shadow-sm">
                            <p class="mb-1 fw-semibold">@post.AuthorUsername</p>
                            <p>@post.Content</p>

                            @if (!string.IsNullOrWhiteSpace(post.ImageUrl))
                            {
                                <div class="text-center mb-3">
                                    <img src="@GetParsedImage(post.ImageUrl)" class="img-fluid rounded" style="max-width: 500px;" />
                                </div>
                            }

                            <div class="d-flex align-items-center flex-wrap mb-2">
                                <span class="me-3">👍 @post.LikeCount</span>
                                <span class="me-3">💬 @post.CommentCount</span>

                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ToggleLike(post.PostId)">Лайк</button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleComments(post.PostId)">
                                    @(visibleComments.Contains(post.PostId) ? "Сховати коментарі" : "Показати коментарі")
                                </button>
                            </div>

                            @if (visibleComments.Contains(post.PostId))
                            {
                                <div class="mb-3">
                                    @if (comments.ContainsKey(post.PostId))
                                    {
                                        <div class="list-group mb-2">
                                            @foreach (var comment in comments[post.PostId])
                                            {
                                                <div class="list-group-item">
                                                    <strong>@comment.AuthorUsername:</strong> @comment.Content
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-muted"><em>Завантаження коментарів...</em></div>
                                    }
                                </div>
                            }

                            @{
                                var commentModel = newComments[post.PostId];
                            }

                            <EditForm Model="commentModel" OnValidSubmit="() => SubmitComment(post.PostId)">
                                <div class="input-group">
                                    <InputText @bind-Value="commentModel.Content" class="form-control" placeholder="Ваш коментар..." />
                                    <button class="btn btn-success" type="submit">Надіслати</button>
                                </div>
                            </EditForm>
                        </div>
                    }
                }
            }
            </div>
        </div>
    </div>
}



@code {
    [Parameter] public string UserId { get; set; } = "";
    private ProfileDto? profile;
    private List<PostDto>? posts;
    private List<EventDto> userEvents = new();
    private Dictionary<int, CreatePostCommentDto> newComments = new();
    private Dictionary<int, List<PostCommentDto>> comments = new();
    private HashSet<int> visibleComments = new();
    private string currentUserId = UserContext.UserId;
    private bool isFollowing;
    private HashSet<int> joinedEventIds = new();

    private bool showEvents = true;
    private bool showPosts = true;


    protected override async Task OnInitializedAsync()
    {
        profile = await ProfileService.GetByUserIdAsync(UserId);
        if (profile == null) return;

        posts = (await PostService.GetAllAsync())
            .Where(p => p.AuthorUsername == profile.Username).ToList();

        userEvents = (await EventService.GetAllAsync())
            .Where(e => e.CreatorUsername == profile.Username).ToList();

        foreach (var post in posts)
        {
            newComments[post.PostId] = new CreatePostCommentDto
                {
                    PostId = post.PostId,
                    UserId = currentUserId,
                    Content = ""
                };
        }

        isFollowing = await FollowService.IsFollowingAsync(currentUserId, UserId);
        var joined = await ParticipantService.GetByUserIdAsync(currentUserId);
        joinedEventIds = joined.Select(p => p.EventId).ToHashSet();

    }

    private async Task ToggleFollow()
    {
        var dto = new FollowDto { FollowerId = currentUserId, FollowedId = UserId };

        if (isFollowing)
            await FollowService.UnfollowAsync(dto);
        else
            await FollowService.FollowAsync(dto);

        isFollowing = !isFollowing;
    }

    private async Task ToggleLike(int postId)
    {
        var dto = new PostLikeDto { PostId = postId, UserId = currentUserId };
        bool liked = await LikeService.IsLikedAsync(postId, currentUserId);

        if (liked)
            await LikeService.UnlikeAsync(dto);
        else
            await LikeService.LikeAsync(dto);

        await RefreshPosts();
    }

    private async Task ToggleComments(int postId)
    {
        if (visibleComments.Contains(postId))
        {
            visibleComments.Remove(postId);
        }
        else
        {
            visibleComments.Add(postId);

            if (!comments.ContainsKey(postId))
            {
                comments[postId] = await CommentService.GetByPostIdAsync(postId);
            }
        }
    }

    private async Task SubmitComment(int postId)
    {
        var dto = newComments[postId];
        if (string.IsNullOrWhiteSpace(dto.Content)) return;

        await CommentService.AddAsync(dto);
        dto.Content = "";

        // оновлення коментарів та постів
        comments[postId] = await CommentService.GetByPostIdAsync(postId);
        await RefreshPosts();
    }

    private async Task RefreshPosts()
    {
        posts = (await PostService.GetAllAsync())
            .Where(p => p.AuthorUsername == profile?.Username).ToList();
    }

    private string GetParsedImage(string? base64)
    {
        if (string.IsNullOrEmpty(base64))
            return ""; // або якась заглушка

        return $"data:image/jpeg;base64,{base64}";
    }

    private async Task JoinEvent(int eventId)
    {
        var dto = new EventParticipantDto
            {
                EventId = eventId,
                UserId = currentUserId,
                Status = "going"
            };

        await ParticipantService.AddAsync(dto);
        await ReloadEventData();
    }

    private async Task LeaveEvent(int eventId)
    {
        var dto = new RemoveEventParticipantDto
            {
                EventId = eventId,
                UserId = currentUserId
            };

        await ParticipantService.RemoveAsync(dto);
        await ReloadEventData();
    }


    private async Task ReloadEventData()
    {
        userEvents = (await EventService.GetAllAsync())
            .Where(e => e.CreatorUsername == profile?.Username).ToList();

        var joined = await ParticipantService.GetByUserIdAsync(currentUserId);
        joinedEventIds = joined.Select(p => p.EventId).ToHashSet();
    }

}
