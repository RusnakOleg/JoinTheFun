@page "/posts"
@using BlazorFrontend.DTO.Posts
@using BlazorFrontend.DTO.Comments
@using BlazorFrontend.DTO.Likes
@using BlazorFrontend.Helpers
@using BlazorFrontend.Services.Interfaces

@inject IPostService PostService
@inject ICommentService CommentService
@inject ILikeService LikeService

@rendermode InteractiveServer

<h3 class="mb-4 fw-bold text-center">Пости</h3>

<div class="d-flex justify-content-center">
    <div style="width: 100%; max-width: 700px;">
        @if (posts == null)
        {
            <div class="text-center text-muted">Завантаження...</div>
        }
        else if (posts.Count == 0)
        {
            <div class="text-center text-muted"><em>Постів не знайдено.</em></div>
        }
        else
        {
            @foreach (var post in posts)
            {
                <div class="card mb-4 shadow-sm">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">@post.AuthorUsername</h6>
                        <p class="card-text">@post.Content</p>

                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <div class="text-center mb-3">
                                <img src="@GetParsedImage(post.ImageUrl)" class="img-fluid rounded" style="max-width: 500px;" />
                            </div>
                        }

                        <div class="d-flex align-items-center mb-2 flex-wrap">
                            <span class="me-3">👍 @post.LikeCount</span>
                            <span class="me-3">💬 @post.CommentCount</span>

                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ToggleLike(post.PostId)">Лайк</button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleComments(post.PostId)">
                                @(visibleComments.Contains(post.PostId) ? "Сховати коментарі" : "Показати коментарі")
                            </button>
                        </div>

                        @if (visibleComments.Contains(post.PostId))
                        {
                            <div class="mt-3">
                                @if (comments.ContainsKey(post.PostId))
                                {
                                    <div class="list-group mb-3">
                                        @foreach (var comment in comments[post.PostId])
                                        {
                                            <div class="list-group-item">
                                                <strong>@comment.AuthorUsername:</strong> @comment.Content
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted"><em>Завантаження коментарів...</em></div>
                                }

                                @{
                                    var commentModel = newComments[post.PostId];
                                }

                                <EditForm Model="commentModel" OnValidSubmit="() => AddComment(post.PostId)">
                                    <div class="input-group">
                                        <InputText @bind-Value="commentModel.Content" class="form-control" placeholder="Ваш коментар..." />
                                        <button class="btn btn-success" type="submit">Надіслати</button>
                                    </div>
                                </EditForm>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>


@code {
    private List<PostDto>? posts;
    private Dictionary<int, CreatePostCommentDto> newComments = new();
    private Dictionary<int, List<PostCommentDto>> comments = new();
    private HashSet<int> visibleComments = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = UserContext.UserId;

        posts = await PostService.GetPostsByFollowingsAsync(userId);

        foreach (var post in posts)
        {
            newComments[post.PostId] = new CreatePostCommentDto
                {
                    PostId = post.PostId,
                    UserId = userId,
                    Content = ""
                };
        }
    }

    private async Task AddComment(int postId)
    {
        if (!newComments.ContainsKey(postId)) return;

        var dto = newComments[postId];
        if (!string.IsNullOrWhiteSpace(dto.Content))
        {
            await CommentService.AddAsync(dto);
            dto.Content = "";

            await RefreshPostsAndComments(postId);
        }
    }

    private async Task ToggleLike(int postId)
    {
        var userId = UserContext.UserId;
        var dto = new PostLikeDto { PostId = postId, UserId = userId };

        bool isLiked = await LikeService.IsLikedAsync(postId, userId);

        if (isLiked)
            await LikeService.UnlikeAsync(dto);
        else
            await LikeService.LikeAsync(dto);

        await RefreshPosts();
    }

    private async Task ToggleComments(int postId)
    {
        if (visibleComments.Contains(postId))
        {
            visibleComments.Remove(postId);
        }
        else
        {
            visibleComments.Add(postId);

            if (!comments.ContainsKey(postId))
            {
                var loadedComments = await CommentService.GetByPostIdAsync(postId);
                comments[postId] = loadedComments.ToList();
            }
        }
    }

    private async Task RefreshPosts()
    {
        var userId = UserContext.UserId;
        posts = await PostService.GetPostsByFollowingsAsync(userId);
    }

    private async Task RefreshPostsAndComments(int postId)
    {
        await RefreshPosts();
        comments[postId] = await CommentService.GetByPostIdAsync(postId);
    }

    private string GetParsedImage(string? base64)
    {
        if (string.IsNullOrEmpty(base64))
            return ""; // або якась заглушка

        return $"data:image/jpeg;base64,{base64}";
    }
}
